fragment TokenContractInfo on TokenContract {
  name
  network
  description
  collectionAddress
  symbol
  chain
}

fragment FullMedia on TokenContentMedia {
  size
  url
  size
  mimeType
  mediaEncoding {
    ... on ImageEncodingTypes {
      __typename
      original
      large
      poster
      thumbnail
    }
    ... on VideoEncodingTypes {
      __typename
      original
      large
      poster
      preview
      thumbnail
    }
    ... on AudioEncodingTypes {
      __typename
      original
      large
    }
    ... on UnsupportedEncodingTypes {
      __typename
      original
    }
  }
}

fragment PriceSummary on PriceAtTime {
  blockNumber
  chainTokenPrice {
    decimal
    raw
  }
  nativePrice {
    decimal
    raw
    currency {
      address
      decimals
      name
    }
  }
  usdcPrice {
    decimal
    raw
  }
}

fragment MintDetails on MintInfo {
  price {
    __typename
    ...PriceSummary
  }
  originatorAddress
  toAddress
  mintContext {
    __typename
    ...TransactionDetails
  }
}

fragment TransactionDetails on TransactionInfo {
  blockNumber
  blockTimestamp
  transactionHash
  logIndex
}

fragment SaleInfo on Sale {
  saleContractAddress
  transactionInfo {
    ...TransactionDetails
  }
  buyerAddress
  collectionAddress
  # saleType{ SaleEventType!}
  price {
    ...PriceSummary
  }
  sellerAddress
  tokenId
}

fragment V3AskProperties on V3Ask {
  __typename
  buyer
  finder
  findersFeeBps
  sellerFundsRecipient
  v3AskStatus
  seller
  address
  askCurrency
  collectionAddress
  askPrice {
    ...PriceSummary
  }
}

fragment MarketPropertiesFull on MarketProperties {
  __typename
  ...V3AskProperties
}

fragment NetworkInfoDetails on NetworkInfo {
  chain
  network
}

fragment MarketInfo on Market {
  collectionAddress
  marketAddress
  marketType
  transactionInfo {
    ...TransactionDetails
  }
  price {
    ...PriceSummary
  }
  status
  networkInfo {
    ...NetworkInfoDetails
  }
}

fragment MarketDetails on Market {
  properties {
    ...MarketPropertiesFull
  }
}

fragment TokenInfo on Token {
  __typename
  tokenId
  tokenContract {
    ...TokenContractInfo
  }
  mintInfo {
    ...MintDetails
  }
  collectionAddress
  lastRefreshTime
  owner
  name
  description
  image {
    ...FullMedia
  }
  content {
    ...FullMedia
  }
}

fragment V3AskEventPropertiesInfo on V3AskEventProperties {
  __typename
  ... on V3AskCreatedEventProperties {
    seller
    sellerFundsRecipient
    askCurrency
    askPrice
    findersFeeBps
    price {
      ...PriceSummary
    }
  }
  ... on V3AskCanceledEventProperties {
    seller
    sellerFundsRecipient
    askCurrency
    askPrice
    findersFeeBps
    price {
      ...PriceSummary
    }
  }
  ... on V3AskPriceUpdatedEventProperties {
    seller
    sellerFundsRecipient
    askCurrency
    askPrice
    findersFeeBps
    price {
      ...PriceSummary
    }
  }
  ... on V3AskFilledEventProperties {
    seller
    sellerFundsRecipient
    askCurrency
    askPrice
    findersFeeBps
    price {
      ...PriceSummary
    }
    finder
    buyer
  }
}

fragment EventInfo on Event {
  transactionInfo {
    ...TransactionDetails
  }
  eventType
  collectionAddress
  tokenId
  properties {
    __typename
    ... on MintEvent {
      tokenId
      collectionAddress
      originatorAddress
      toAddress
      price {
        ...PriceSummary
      }
    }
    ... on TransferEvent {
      fromAddress
      toAddress
      collectionAddress
      tokenId
    }
    ... on V3AskEvent {
      v3AskEventType
      address
      collectionAddress
      tokenId

      properties {
        ...V3AskEventPropertiesInfo
      }
    }
  }
}

fragment TokenDetails on Token {
  metadata

  tokenUrl
  tokenUrlMimeType

  attributes {
    traitType
    value
    displayType
  }
}

fragment CollectionInfo on Collection {
  address
  description
  name
  symbol
  totalSupply
  networkInfo {
    ...NetworkInfoDetails
  }
}

# todo: overlapping types with union require a rename of description
fragment CollectionInfoSearchResult on Collection {
  address
  collectionDescription: description
  name
  symbol
  totalSupply
}

fragment CollectionDetails on Collection {
  networkInfo {
    ...NetworkInfoDetails
  }
  attributes {
    traitType
    valueMetrics {
      count
      percent
      value
    }
  }
}

fragment PageInfoDefault on PageInfo {
  endCursor
  hasNextPage
  limit
}

fragment OwnerCountInfo on OwnerCount {
  owner
  count
  tokenIds
}

query events(
  $networks: [NetworkInput!]!
  $filter: EventsQueryFilter
  $pagination: PaginationInput!
  $sort: EventSortKeySortInput!
  $where: EventsQueryInput!
) {
  events(
    networks: $networks
    filter: $filter
    pagination: $pagination
    sort: $sort
    where: $where
  ) {
    __typename
    pageInfo {
      __typename
      ...PageInfoDefault
    }
    nodes {
      ...EventInfo
    }
  }
}

fragment V3ReserveAuctionProperties on V3ReserveAuction {
  address
  tokenId
  collectionAddress
  status
  firstBid
  extended
  price {
    __typename
    ...PriceSummary
  }
  seller
  reserve
  v3AuctionReservePrice: reservePrice {
    __typename
    ...PriceSummary
  }
  sellerFundsRecipient
  highestBid
  highestBidPrice {
    __typename
    ...PriceSummary
  }
  v3HighestBidder: highestBidder
  duration
  startTime
  v3FirstBidTime: firstBidTime
  currency
  finder
  findersFeeBps
  estimatedDurationTime
}

fragment ActiveMarketInfo on ActiveMarket {
  networkInfo {
    __typename
    ...NetworkInfoDetails
  }
  transactionInfo {
    __typename
    ...TransactionDetails
  }
  status
  marketAddress
  collectionAddress
  tokenId
  marketType
  properties {
    __typename
    ... on V3ReserveAuction {
      ...V3ReserveAuctionProperties
    }
  }
  price {
    __typename
    ...PriceSummary
  }
}

query market(
  $network: NetworkInput
  $where: ActiveMarketQueryInput!
) {
  market(network: $network, where: $where) {
    ...ActiveMarketInfo
  }
}

query markets(
  $networks: [NetworkInput!]!
  $filter: MarketsQueryFilter
  $pagination: PaginationInput!
  $sort: MarketSortKeySortInput!
  $where: MarketsQueryInput
  $includeFullDetails: Boolean!
) {
  markets(
    networks: $networks
    filter: $filter
    sort: $sort
    where: $where
    pagination: $pagination
  ) {
    __typename
    pageInfo {
      endCursor
      hasNextPage
      limit
    }
    nodes {
      token {
        ...TokenInfo
        ...TokenDetails @include(if: $includeFullDetails)
      }
      market {
        ...MarketInfo
        ...MarketDetails @include(if: $includeFullDetails)
      }
    }
  }
}

fragment MarketsOnMintInfo on MintWithTokenAndMarkets {
  markets(pagination: { limit: 10 }, sort: { sortKey: NONE, sortDirection: DESC }) {
    ...MarketInfo
    ...MarketDetails
  }
}

query mints(
  $networks: [NetworkInput!]!
  $filter: MintsQueryFilter
  $pagination: PaginationInput!
  $sort: MintSortKeySortInput!
  $where: MintsQueryInput
  $includeFullDetails: Boolean!
  $includeMarkets: Boolean!
) {
  mints(
    where: $where
    networks: $networks
    filter: $filter
    pagination: $pagination
    sort: $sort
  ) {
    __typename
    pageInfo {
      endCursor
      hasNextPage
      limit
    }
    nodes {
      __typename
      mint {
        collectionAddress
        tokenId
        originatorAddress
        toAddress
        transactionInfo {
          ...TransactionDetails
        }
      }
      token {
        ...TokenInfo
        ...TokenDetails @include(if: $includeFullDetails)
      }
      ...MarketsOnMintInfo @include(if: $includeMarkets)
    }
  }
}

query collections(
  $networks: [NetworkInput!]!
  $where: CollectionsQueryInput!
  $pagination: PaginationInput!
  $sort: CollectionSortKeySortInput!
  $includeFullDetails: Boolean!
) {
  collections(where: $where, networks: $networks, pagination: $pagination, sort: $sort) {
    __typename
    pageInfo {
      endCursor
      hasNextPage
      limit
    }
    nodes {
      ...CollectionInfo
      ...CollectionDetails @include(if: $includeFullDetails)
    }
  }
}

query sales(
  $networks: [NetworkInput!]!
  $where: SalesQueryInput!
  $filter: SalesQueryFilter
  $sort: SaleSortKeySortInput!
  $pagination: PaginationInput!
  $includeFullDetails: Boolean!
) {
  sales(
    networks: $networks
    where: $where
    filter: $filter
    sort: $sort
    pagination: $pagination
  ) {
    __typename
    pageInfo {
      endCursor
      hasNextPage
      limit
    }
    nodes {
      sale {
        ...SaleInfo
      }
      token {
        ...TokenInfo
        ...TokenDetails @include(if: $includeFullDetails)
      }
    }
  }
}

fragment TokensSalesInfo on TokenWithMarketsSummary {
  sales(pagination: { limit: 10 }, sort: { sortKey: TIME, sortDirection: DESC }) {
    ...SaleInfo
  }
}

fragment TokensEventsInfo on TokenWithMarketsSummary {
  events(pagination: { limit: 10 }, sort: { sortKey: CREATED, sortDirection: DESC }) {
    ...EventInfo
  }
}

query tokens(
  $networks: [NetworkInput!]!
  $where: TokensQueryInput
  $filter: TokensQueryFilter
  $pagination: PaginationInput!
  $sort: TokenSortInput!
  $includeFullDetails: Boolean!
  $includeSalesHistory: Boolean!
) {
  tokens(
    where: $where
    networks: $networks
    pagination: $pagination
    sort: $sort
    filter: $filter
  ) {
    __typename
    pageInfo {
      endCursor
      hasNextPage
      limit
    }
    nodes {
      __typename
      marketsSummary {
        ...MarketInfo
        ...MarketDetails @include(if: $includeFullDetails)
      }
      token {
        ...TokenInfo
        ...TokenDetails @include(if: $includeFullDetails)
      }
      ...TokensSalesInfo @include(if: $includeSalesHistory)
      ...TokensEventsInfo @include(if: $includeFullDetails)
    }
  }
}

fragment TokenFullDetails on TokenWithFullMarketHistory {
  sales(pagination: { limit: 10 }, sort: { sortKey: TIME, sortDirection: DESC }) {
    ...SaleInfo @include(if: $includeFullDetails)
  }
  events(pagination: { limit: 10 }, sort: { sortKey: CREATED, sortDirection: DESC }) {
    ...EventInfo
  }
}

query token($network: NetworkInput!, $token: TokenInput!, $includeFullDetails: Boolean!) {
  token(network: $network, token: $token) {
    __typename
    token {
      __typename
      ...TokenInfo
      ...TokenDetails @include(if: $includeFullDetails)
    }

    ...TokenFullDetails @include(if: $includeFullDetails)

    markets(
      pagination: { limit: 10, after: null }
      sort: { sortKey: NONE, sortDirection: DESC }
    ) {
      ...MarketInfo
      ...MarketDetails @include(if: $includeFullDetails)
    }
  }
}

query aggregateAttributes(
  $networks: [NetworkInput!]!
  $where: AggregateAttributesQueryInput!
) {
  aggregateAttributes(networks: $networks, where: $where) {
    traitType
    valueMetrics {
      value
      count
      percent
    }
  }
}

query ownersByCount(
  $networks: [NetworkInput!]!
  $pagination: PaginationInput!
  $where: OwnersByCountQueryInput!
) {
  aggregateStat {
    ownersByCount(networks: $networks, pagination: $pagination, where: $where) {
      pageInfo {
        endCursor
        hasNextPage
        limit
      }
      nodes {
        ...OwnerCountInfo
      }
    }
  }
}

query salesVolume(
  $networks: [NetworkInput!]!
  $where: CollectionAddressOwnerAddressAttributesInput!
  $filter: SalesVolumeFilter
) {
  aggregateStat {
    salesVolume(where: $where, networks: $networks, filter: $filter) {
      chainTokenPrice
      usdcPrice
      totalCount
    }
  }
}

query ownerCount(
  $networks: [NetworkInput!]!
  $where: CollectionAddressAndAttributesInput!
) {
  aggregateStat {
    ownerCount(where: $where, networks: $networks)
  }
}

query nftCount(
  $networks: [NetworkInput!]!
  $where: CollectionAddressOwnerAddressAttributesInput!
) {
  aggregateStat {
    nftCount(where: $where, networks: $networks)
  }
}

query floorPrice(
  $networks: [NetworkInput!]!
  $where: CollectionAddressAndAttributesInput!
) {
  aggregateStat {
    floorPrice(where: $where, networks: $networks)
  }
}

query collectionStatsAggregate(
  $collectionAddress: String!
  # should only be one network passed in given it's a single collection
  $networks: [NetworkInput!]!
) {
  aggregateStat {
    floorPrice(where: { collectionAddresses: [$collectionAddress] }, networks: $networks)

    ownerCount(where: { collectionAddresses: [$collectionAddress] }, networks: $networks)

    nftCount(where: { collectionAddresses: [$collectionAddress] }, networks: $networks)

    salesVolume(
      where: { collectionAddresses: [$collectionAddress] }
      networks: $networks
    ) {
      chainTokenPrice
      usdcPrice
      totalCount
    }
  }
}

query search(
  $pagination: SearchPaginationInput!
  $query: SearchQueryInput!
  $filter: SearchFilter
) {
  search(pagination: $pagination, query: $query, filter: $filter) {
    __typename
    pageInfo {
      endCursor
      hasNextPage
      limit
    }
    nodes {
      name
      description
      entityType
      collectionAddress
      networkInfo {
        chain
        network
      }
      tokenId

      entity {
        __typename
        ... on Token {
          ...TokenInfo
        }
        ... on Collection {
          ...CollectionInfoSearchResult
        }
      }
    }
  }
}
